// Code generated by protoc-gen-go.
// source: anauth/ecpsys/ecpsyspb/ecpsys.proto
// DO NOT EDIT!

/*
Package ecpsyspb is a generated protocol buffer package.

It is generated from these files:
	anauth/ecpsys/ecpsyspb/ecpsys.proto

It has these top-level messages:
	CARequest
	CAResponse
	ProofRandData
	Cert
	ECGroupElement
	GenerateNymRequest
	ObtainCredRequest
	ObtainCredResponse
	TransferCredRequest
	GenerateNymProofRandData
	Cred
	Transcript
	ObtainCredProofRandData
	TransferCredProofRandData
*/
package ecpsyspb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import psyspb "github.com/emmyzkp/emmy/anauth/psys/psyspb"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CARequest struct {
	// Types that are valid to be assigned to Type:
	//	*CARequest_ProofRandData
	//	*CARequest_ProofData
	Type isCARequest_Type `protobuf_oneof:"type"`
}

func (m *CARequest) Reset()                    { *m = CARequest{} }
func (m *CARequest) String() string            { return proto.CompactTextString(m) }
func (*CARequest) ProtoMessage()               {}
func (*CARequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isCARequest_Type interface {
	isCARequest_Type()
}

type CARequest_ProofRandData struct {
	ProofRandData *ProofRandData `protobuf:"bytes,1,opt,name=proofRandData,oneof"`
}
type CARequest_ProofData struct {
	ProofData []byte `protobuf:"bytes,2,opt,name=proofData,proto3,oneof"`
}

func (*CARequest_ProofRandData) isCARequest_Type() {}
func (*CARequest_ProofData) isCARequest_Type()     {}

func (m *CARequest) GetType() isCARequest_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *CARequest) GetProofRandData() *ProofRandData {
	if x, ok := m.GetType().(*CARequest_ProofRandData); ok {
		return x.ProofRandData
	}
	return nil
}

func (m *CARequest) GetProofData() []byte {
	if x, ok := m.GetType().(*CARequest_ProofData); ok {
		return x.ProofData
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CARequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CARequest_OneofMarshaler, _CARequest_OneofUnmarshaler, _CARequest_OneofSizer, []interface{}{
		(*CARequest_ProofRandData)(nil),
		(*CARequest_ProofData)(nil),
	}
}

func _CARequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CARequest)
	// type
	switch x := m.Type.(type) {
	case *CARequest_ProofRandData:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ProofRandData); err != nil {
			return err
		}
	case *CARequest_ProofData:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.ProofData)
	case nil:
	default:
		return fmt.Errorf("CARequest.Type has unexpected type %T", x)
	}
	return nil
}

func _CARequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CARequest)
	switch tag {
	case 1: // type.proofRandData
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProofRandData)
		err := b.DecodeMessage(msg)
		m.Type = &CARequest_ProofRandData{msg}
		return true, err
	case 2: // type.proofData
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Type = &CARequest_ProofData{x}
		return true, err
	default:
		return false, nil
	}
}

func _CARequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CARequest)
	// type
	switch x := m.Type.(type) {
	case *CARequest_ProofRandData:
		s := proto.Size(x.ProofRandData)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *CARequest_ProofData:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.ProofData)))
		n += len(x.ProofData)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type CAResponse struct {
	// Types that are valid to be assigned to Type:
	//	*CAResponse_Challenge
	//	*CAResponse_Cert
	Type isCAResponse_Type `protobuf_oneof:"type"`
}

func (m *CAResponse) Reset()                    { *m = CAResponse{} }
func (m *CAResponse) String() string            { return proto.CompactTextString(m) }
func (*CAResponse) ProtoMessage()               {}
func (*CAResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type isCAResponse_Type interface {
	isCAResponse_Type()
}

type CAResponse_Challenge struct {
	Challenge []byte `protobuf:"bytes,1,opt,name=challenge,proto3,oneof"`
}
type CAResponse_Cert struct {
	Cert *Cert `protobuf:"bytes,2,opt,name=cert,oneof"`
}

func (*CAResponse_Challenge) isCAResponse_Type() {}
func (*CAResponse_Cert) isCAResponse_Type()      {}

func (m *CAResponse) GetType() isCAResponse_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *CAResponse) GetChallenge() []byte {
	if x, ok := m.GetType().(*CAResponse_Challenge); ok {
		return x.Challenge
	}
	return nil
}

func (m *CAResponse) GetCert() *Cert {
	if x, ok := m.GetType().(*CAResponse_Cert); ok {
		return x.Cert
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*CAResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _CAResponse_OneofMarshaler, _CAResponse_OneofUnmarshaler, _CAResponse_OneofSizer, []interface{}{
		(*CAResponse_Challenge)(nil),
		(*CAResponse_Cert)(nil),
	}
}

func _CAResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*CAResponse)
	// type
	switch x := m.Type.(type) {
	case *CAResponse_Challenge:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.Challenge)
	case *CAResponse_Cert:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Cert); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("CAResponse.Type has unexpected type %T", x)
	}
	return nil
}

func _CAResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*CAResponse)
	switch tag {
	case 1: // type.challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Type = &CAResponse_Challenge{x}
		return true, err
	case 2: // type.cert
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Cert)
		err := b.DecodeMessage(msg)
		m.Type = &CAResponse_Cert{msg}
		return true, err
	default:
		return false, nil
	}
}

func _CAResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*CAResponse)
	// type
	switch x := m.Type.(type) {
	case *CAResponse_Challenge:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Challenge)))
		n += len(x.Challenge)
	case *CAResponse_Cert:
		s := proto.Size(x.Cert)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Random data for schnorr proof
type ProofRandData struct {
	X *ECGroupElement `protobuf:"bytes,1,opt,name=X" json:"X,omitempty"`
	A *ECGroupElement `protobuf:"bytes,2,opt,name=A" json:"A,omitempty"`
	B *ECGroupElement `protobuf:"bytes,3,opt,name=B" json:"B,omitempty"`
}

func (m *ProofRandData) Reset()                    { *m = ProofRandData{} }
func (m *ProofRandData) String() string            { return proto.CompactTextString(m) }
func (*ProofRandData) ProtoMessage()               {}
func (*ProofRandData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ProofRandData) GetX() *ECGroupElement {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *ProofRandData) GetA() *ECGroupElement {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *ProofRandData) GetB() *ECGroupElement {
	if m != nil {
		return m.B
	}
	return nil
}

type Cert struct {
	BlindedA *ECGroupElement `protobuf:"bytes,1,opt,name=BlindedA" json:"BlindedA,omitempty"`
	BlindedB *ECGroupElement `protobuf:"bytes,2,opt,name=BlindedB" json:"BlindedB,omitempty"`
	R        []byte          `protobuf:"bytes,3,opt,name=R,proto3" json:"R,omitempty"`
	S        []byte          `protobuf:"bytes,4,opt,name=S,proto3" json:"S,omitempty"`
}

func (m *Cert) Reset()                    { *m = Cert{} }
func (m *Cert) String() string            { return proto.CompactTextString(m) }
func (*Cert) ProtoMessage()               {}
func (*Cert) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Cert) GetBlindedA() *ECGroupElement {
	if m != nil {
		return m.BlindedA
	}
	return nil
}

func (m *Cert) GetBlindedB() *ECGroupElement {
	if m != nil {
		return m.BlindedB
	}
	return nil
}

func (m *Cert) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *Cert) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

type ECGroupElement struct {
	X []byte `protobuf:"bytes,1,opt,name=X,proto3" json:"X,omitempty"`
	Y []byte `protobuf:"bytes,2,opt,name=Y,proto3" json:"Y,omitempty"`
}

func (m *ECGroupElement) Reset()                    { *m = ECGroupElement{} }
func (m *ECGroupElement) String() string            { return proto.CompactTextString(m) }
func (*ECGroupElement) ProtoMessage()               {}
func (*ECGroupElement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ECGroupElement) GetX() []byte {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *ECGroupElement) GetY() []byte {
	if m != nil {
		return m.Y
	}
	return nil
}

type GenerateNymRequest struct {
	// Types that are valid to be assigned to Type:
	//	*GenerateNymRequest_ProofRandData
	//	*GenerateNymRequest_ProofData
	Type isGenerateNymRequest_Type `protobuf_oneof:"type"`
}

func (m *GenerateNymRequest) Reset()                    { *m = GenerateNymRequest{} }
func (m *GenerateNymRequest) String() string            { return proto.CompactTextString(m) }
func (*GenerateNymRequest) ProtoMessage()               {}
func (*GenerateNymRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type isGenerateNymRequest_Type interface {
	isGenerateNymRequest_Type()
}

type GenerateNymRequest_ProofRandData struct {
	ProofRandData *GenerateNymProofRandData `protobuf:"bytes,1,opt,name=proofRandData,oneof"`
}
type GenerateNymRequest_ProofData struct {
	ProofData []byte `protobuf:"bytes,2,opt,name=proofData,proto3,oneof"`
}

func (*GenerateNymRequest_ProofRandData) isGenerateNymRequest_Type() {}
func (*GenerateNymRequest_ProofData) isGenerateNymRequest_Type()     {}

func (m *GenerateNymRequest) GetType() isGenerateNymRequest_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *GenerateNymRequest) GetProofRandData() *GenerateNymProofRandData {
	if x, ok := m.GetType().(*GenerateNymRequest_ProofRandData); ok {
		return x.ProofRandData
	}
	return nil
}

func (m *GenerateNymRequest) GetProofData() []byte {
	if x, ok := m.GetType().(*GenerateNymRequest_ProofData); ok {
		return x.ProofData
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GenerateNymRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GenerateNymRequest_OneofMarshaler, _GenerateNymRequest_OneofUnmarshaler, _GenerateNymRequest_OneofSizer, []interface{}{
		(*GenerateNymRequest_ProofRandData)(nil),
		(*GenerateNymRequest_ProofData)(nil),
	}
}

func _GenerateNymRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GenerateNymRequest)
	// type
	switch x := m.Type.(type) {
	case *GenerateNymRequest_ProofRandData:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ProofRandData); err != nil {
			return err
		}
	case *GenerateNymRequest_ProofData:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.ProofData)
	case nil:
	default:
		return fmt.Errorf("GenerateNymRequest.Type has unexpected type %T", x)
	}
	return nil
}

func _GenerateNymRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GenerateNymRequest)
	switch tag {
	case 1: // type.proofRandData
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(GenerateNymProofRandData)
		err := b.DecodeMessage(msg)
		m.Type = &GenerateNymRequest_ProofRandData{msg}
		return true, err
	case 2: // type.proofData
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Type = &GenerateNymRequest_ProofData{x}
		return true, err
	default:
		return false, nil
	}
}

func _GenerateNymRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GenerateNymRequest)
	// type
	switch x := m.Type.(type) {
	case *GenerateNymRequest_ProofRandData:
		s := proto.Size(x.ProofRandData)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *GenerateNymRequest_ProofData:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.ProofData)))
		n += len(x.ProofData)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ObtainCredRequest struct {
	// Types that are valid to be assigned to Type:
	//	*ObtainCredRequest_ProofRandData
	//	*ObtainCredRequest_ProofData
	//	*ObtainCredRequest_Challenge
	Type isObtainCredRequest_Type `protobuf_oneof:"type"`
}

func (m *ObtainCredRequest) Reset()                    { *m = ObtainCredRequest{} }
func (m *ObtainCredRequest) String() string            { return proto.CompactTextString(m) }
func (*ObtainCredRequest) ProtoMessage()               {}
func (*ObtainCredRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type isObtainCredRequest_Type interface {
	isObtainCredRequest_Type()
}

type ObtainCredRequest_ProofRandData struct {
	ProofRandData *ProofRandData `protobuf:"bytes,1,opt,name=proofRandData,oneof"`
}
type ObtainCredRequest_ProofData struct {
	ProofData []byte `protobuf:"bytes,2,opt,name=proofData,proto3,oneof"`
}
type ObtainCredRequest_Challenge struct {
	Challenge *psyspb.BytesPair `protobuf:"bytes,3,opt,name=challenge,oneof"`
}

func (*ObtainCredRequest_ProofRandData) isObtainCredRequest_Type() {}
func (*ObtainCredRequest_ProofData) isObtainCredRequest_Type()     {}
func (*ObtainCredRequest_Challenge) isObtainCredRequest_Type()     {}

func (m *ObtainCredRequest) GetType() isObtainCredRequest_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *ObtainCredRequest) GetProofRandData() *ProofRandData {
	if x, ok := m.GetType().(*ObtainCredRequest_ProofRandData); ok {
		return x.ProofRandData
	}
	return nil
}

func (m *ObtainCredRequest) GetProofData() []byte {
	if x, ok := m.GetType().(*ObtainCredRequest_ProofData); ok {
		return x.ProofData
	}
	return nil
}

func (m *ObtainCredRequest) GetChallenge() *psyspb.BytesPair {
	if x, ok := m.GetType().(*ObtainCredRequest_Challenge); ok {
		return x.Challenge
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ObtainCredRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ObtainCredRequest_OneofMarshaler, _ObtainCredRequest_OneofUnmarshaler, _ObtainCredRequest_OneofSizer, []interface{}{
		(*ObtainCredRequest_ProofRandData)(nil),
		(*ObtainCredRequest_ProofData)(nil),
		(*ObtainCredRequest_Challenge)(nil),
	}
}

func _ObtainCredRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ObtainCredRequest)
	// type
	switch x := m.Type.(type) {
	case *ObtainCredRequest_ProofRandData:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ProofRandData); err != nil {
			return err
		}
	case *ObtainCredRequest_ProofData:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.ProofData)
	case *ObtainCredRequest_Challenge:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Challenge); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ObtainCredRequest.Type has unexpected type %T", x)
	}
	return nil
}

func _ObtainCredRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ObtainCredRequest)
	switch tag {
	case 1: // type.proofRandData
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ProofRandData)
		err := b.DecodeMessage(msg)
		m.Type = &ObtainCredRequest_ProofRandData{msg}
		return true, err
	case 2: // type.proofData
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Type = &ObtainCredRequest_ProofData{x}
		return true, err
	case 3: // type.challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(psyspb.BytesPair)
		err := b.DecodeMessage(msg)
		m.Type = &ObtainCredRequest_Challenge{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ObtainCredRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ObtainCredRequest)
	// type
	switch x := m.Type.(type) {
	case *ObtainCredRequest_ProofRandData:
		s := proto.Size(x.ProofRandData)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ObtainCredRequest_ProofData:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.ProofData)))
		n += len(x.ProofData)
	case *ObtainCredRequest_Challenge:
		s := proto.Size(x.Challenge)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ObtainCredResponse struct {
	// Types that are valid to be assigned to Type:
	//	*ObtainCredResponse_Challenge
	//	*ObtainCredResponse_ProofRandData
	//	*ObtainCredResponse_ProofData
	Type isObtainCredResponse_Type `protobuf_oneof:"type"`
}

func (m *ObtainCredResponse) Reset()                    { *m = ObtainCredResponse{} }
func (m *ObtainCredResponse) String() string            { return proto.CompactTextString(m) }
func (*ObtainCredResponse) ProtoMessage()               {}
func (*ObtainCredResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type isObtainCredResponse_Type interface {
	isObtainCredResponse_Type()
}

type ObtainCredResponse_Challenge struct {
	Challenge []byte `protobuf:"bytes,1,opt,name=challenge,proto3,oneof"`
}
type ObtainCredResponse_ProofRandData struct {
	ProofRandData *ObtainCredProofRandData `protobuf:"bytes,2,opt,name=proofRandData,oneof"`
}
type ObtainCredResponse_ProofData struct {
	ProofData *psyspb.BytesPair `protobuf:"bytes,3,opt,name=proofData,oneof"`
}

func (*ObtainCredResponse_Challenge) isObtainCredResponse_Type()     {}
func (*ObtainCredResponse_ProofRandData) isObtainCredResponse_Type() {}
func (*ObtainCredResponse_ProofData) isObtainCredResponse_Type()     {}

func (m *ObtainCredResponse) GetType() isObtainCredResponse_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *ObtainCredResponse) GetChallenge() []byte {
	if x, ok := m.GetType().(*ObtainCredResponse_Challenge); ok {
		return x.Challenge
	}
	return nil
}

func (m *ObtainCredResponse) GetProofRandData() *ObtainCredProofRandData {
	if x, ok := m.GetType().(*ObtainCredResponse_ProofRandData); ok {
		return x.ProofRandData
	}
	return nil
}

func (m *ObtainCredResponse) GetProofData() *psyspb.BytesPair {
	if x, ok := m.GetType().(*ObtainCredResponse_ProofData); ok {
		return x.ProofData
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ObtainCredResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ObtainCredResponse_OneofMarshaler, _ObtainCredResponse_OneofUnmarshaler, _ObtainCredResponse_OneofSizer, []interface{}{
		(*ObtainCredResponse_Challenge)(nil),
		(*ObtainCredResponse_ProofRandData)(nil),
		(*ObtainCredResponse_ProofData)(nil),
	}
}

func _ObtainCredResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ObtainCredResponse)
	// type
	switch x := m.Type.(type) {
	case *ObtainCredResponse_Challenge:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.Challenge)
	case *ObtainCredResponse_ProofRandData:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ProofRandData); err != nil {
			return err
		}
	case *ObtainCredResponse_ProofData:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ProofData); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ObtainCredResponse.Type has unexpected type %T", x)
	}
	return nil
}

func _ObtainCredResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ObtainCredResponse)
	switch tag {
	case 1: // type.challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Type = &ObtainCredResponse_Challenge{x}
		return true, err
	case 2: // type.proofRandData
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ObtainCredProofRandData)
		err := b.DecodeMessage(msg)
		m.Type = &ObtainCredResponse_ProofRandData{msg}
		return true, err
	case 3: // type.proofData
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(psyspb.BytesPair)
		err := b.DecodeMessage(msg)
		m.Type = &ObtainCredResponse_ProofData{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ObtainCredResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ObtainCredResponse)
	// type
	switch x := m.Type.(type) {
	case *ObtainCredResponse_Challenge:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Challenge)))
		n += len(x.Challenge)
	case *ObtainCredResponse_ProofRandData:
		s := proto.Size(x.ProofRandData)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ObtainCredResponse_ProofData:
		s := proto.Size(x.ProofData)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type TransferCredRequest struct {
	// Types that are valid to be assigned to Type:
	//	*TransferCredRequest_ProofRandData
	//	*TransferCredRequest_ProofData
	Type isTransferCredRequest_Type `protobuf_oneof:"type"`
}

func (m *TransferCredRequest) Reset()                    { *m = TransferCredRequest{} }
func (m *TransferCredRequest) String() string            { return proto.CompactTextString(m) }
func (*TransferCredRequest) ProtoMessage()               {}
func (*TransferCredRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type isTransferCredRequest_Type interface {
	isTransferCredRequest_Type()
}

type TransferCredRequest_ProofRandData struct {
	ProofRandData *TransferCredProofRandData `protobuf:"bytes,1,opt,name=proofRandData,oneof"`
}
type TransferCredRequest_ProofData struct {
	ProofData []byte `protobuf:"bytes,2,opt,name=proofData,proto3,oneof"`
}

func (*TransferCredRequest_ProofRandData) isTransferCredRequest_Type() {}
func (*TransferCredRequest_ProofData) isTransferCredRequest_Type()     {}

func (m *TransferCredRequest) GetType() isTransferCredRequest_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *TransferCredRequest) GetProofRandData() *TransferCredProofRandData {
	if x, ok := m.GetType().(*TransferCredRequest_ProofRandData); ok {
		return x.ProofRandData
	}
	return nil
}

func (m *TransferCredRequest) GetProofData() []byte {
	if x, ok := m.GetType().(*TransferCredRequest_ProofData); ok {
		return x.ProofData
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TransferCredRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TransferCredRequest_OneofMarshaler, _TransferCredRequest_OneofUnmarshaler, _TransferCredRequest_OneofSizer, []interface{}{
		(*TransferCredRequest_ProofRandData)(nil),
		(*TransferCredRequest_ProofData)(nil),
	}
}

func _TransferCredRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TransferCredRequest)
	// type
	switch x := m.Type.(type) {
	case *TransferCredRequest_ProofRandData:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ProofRandData); err != nil {
			return err
		}
	case *TransferCredRequest_ProofData:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.ProofData)
	case nil:
	default:
		return fmt.Errorf("TransferCredRequest.Type has unexpected type %T", x)
	}
	return nil
}

func _TransferCredRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TransferCredRequest)
	switch tag {
	case 1: // type.proofRandData
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TransferCredProofRandData)
		err := b.DecodeMessage(msg)
		m.Type = &TransferCredRequest_ProofRandData{msg}
		return true, err
	case 2: // type.proofData
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Type = &TransferCredRequest_ProofData{x}
		return true, err
	default:
		return false, nil
	}
}

func _TransferCredRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TransferCredRequest)
	// type
	switch x := m.Type.(type) {
	case *TransferCredRequest_ProofRandData:
		s := proto.Size(x.ProofRandData)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TransferCredRequest_ProofData:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.ProofData)))
		n += len(x.ProofData)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type GenerateNymProofRandData struct {
	X1     *ECGroupElement `protobuf:"bytes,1,opt,name=X1" json:"X1,omitempty"`
	A1     *ECGroupElement `protobuf:"bytes,2,opt,name=A1" json:"A1,omitempty"`
	B1     *ECGroupElement `protobuf:"bytes,3,opt,name=B1" json:"B1,omitempty"`
	X2     *ECGroupElement `protobuf:"bytes,4,opt,name=X2" json:"X2,omitempty"`
	A2     *ECGroupElement `protobuf:"bytes,5,opt,name=A2" json:"A2,omitempty"`
	B2     *ECGroupElement `protobuf:"bytes,6,opt,name=B2" json:"B2,omitempty"`
	R      []byte          `protobuf:"bytes,7,opt,name=R,proto3" json:"R,omitempty"`
	S      []byte          `protobuf:"bytes,8,opt,name=S,proto3" json:"S,omitempty"`
	RegKey string          `protobuf:"bytes,9,opt,name=regKey" json:"regKey,omitempty"`
}

func (m *GenerateNymProofRandData) Reset()                    { *m = GenerateNymProofRandData{} }
func (m *GenerateNymProofRandData) String() string            { return proto.CompactTextString(m) }
func (*GenerateNymProofRandData) ProtoMessage()               {}
func (*GenerateNymProofRandData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GenerateNymProofRandData) GetX1() *ECGroupElement {
	if m != nil {
		return m.X1
	}
	return nil
}

func (m *GenerateNymProofRandData) GetA1() *ECGroupElement {
	if m != nil {
		return m.A1
	}
	return nil
}

func (m *GenerateNymProofRandData) GetB1() *ECGroupElement {
	if m != nil {
		return m.B1
	}
	return nil
}

func (m *GenerateNymProofRandData) GetX2() *ECGroupElement {
	if m != nil {
		return m.X2
	}
	return nil
}

func (m *GenerateNymProofRandData) GetA2() *ECGroupElement {
	if m != nil {
		return m.A2
	}
	return nil
}

func (m *GenerateNymProofRandData) GetB2() *ECGroupElement {
	if m != nil {
		return m.B2
	}
	return nil
}

func (m *GenerateNymProofRandData) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *GenerateNymProofRandData) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

func (m *GenerateNymProofRandData) GetRegKey() string {
	if m != nil {
		return m.RegKey
	}
	return ""
}

type Cred struct {
	SmallAToGamma *ECGroupElement `protobuf:"bytes,1,opt,name=SmallAToGamma" json:"SmallAToGamma,omitempty"`
	SmallBToGamma *ECGroupElement `protobuf:"bytes,2,opt,name=SmallBToGamma" json:"SmallBToGamma,omitempty"`
	AToGamma      *ECGroupElement `protobuf:"bytes,3,opt,name=AToGamma" json:"AToGamma,omitempty"`
	BToGamma      *ECGroupElement `protobuf:"bytes,4,opt,name=BToGamma" json:"BToGamma,omitempty"`
	T1            *Transcript     `protobuf:"bytes,5,opt,name=T1" json:"T1,omitempty"`
	T2            *Transcript     `protobuf:"bytes,6,opt,name=T2" json:"T2,omitempty"`
}

func (m *Cred) Reset()                    { *m = Cred{} }
func (m *Cred) String() string            { return proto.CompactTextString(m) }
func (*Cred) ProtoMessage()               {}
func (*Cred) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Cred) GetSmallAToGamma() *ECGroupElement {
	if m != nil {
		return m.SmallAToGamma
	}
	return nil
}

func (m *Cred) GetSmallBToGamma() *ECGroupElement {
	if m != nil {
		return m.SmallBToGamma
	}
	return nil
}

func (m *Cred) GetAToGamma() *ECGroupElement {
	if m != nil {
		return m.AToGamma
	}
	return nil
}

func (m *Cred) GetBToGamma() *ECGroupElement {
	if m != nil {
		return m.BToGamma
	}
	return nil
}

func (m *Cred) GetT1() *Transcript {
	if m != nil {
		return m.T1
	}
	return nil
}

func (m *Cred) GetT2() *Transcript {
	if m != nil {
		return m.T2
	}
	return nil
}

type Transcript struct {
	A      *ECGroupElement `protobuf:"bytes,1,opt,name=A" json:"A,omitempty"`
	B      *ECGroupElement `protobuf:"bytes,2,opt,name=B" json:"B,omitempty"`
	Hash   []byte          `protobuf:"bytes,3,opt,name=Hash,proto3" json:"Hash,omitempty"`
	ZAlpha []byte          `protobuf:"bytes,4,opt,name=ZAlpha,proto3" json:"ZAlpha,omitempty"`
}

func (m *Transcript) Reset()                    { *m = Transcript{} }
func (m *Transcript) String() string            { return proto.CompactTextString(m) }
func (*Transcript) ProtoMessage()               {}
func (*Transcript) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Transcript) GetA() *ECGroupElement {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *Transcript) GetB() *ECGroupElement {
	if m != nil {
		return m.B
	}
	return nil
}

func (m *Transcript) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *Transcript) GetZAlpha() []byte {
	if m != nil {
		return m.ZAlpha
	}
	return nil
}

type ObtainCredProofRandData struct {
	X11 *ECGroupElement `protobuf:"bytes,1,opt,name=X11" json:"X11,omitempty"`
	X12 *ECGroupElement `protobuf:"bytes,2,opt,name=X12" json:"X12,omitempty"`
	X21 *ECGroupElement `protobuf:"bytes,3,opt,name=X21" json:"X21,omitempty"`
	X22 *ECGroupElement `protobuf:"bytes,4,opt,name=X22" json:"X22,omitempty"`
	A   *ECGroupElement `protobuf:"bytes,5,opt,name=A" json:"A,omitempty"`
	B   *ECGroupElement `protobuf:"bytes,6,opt,name=B" json:"B,omitempty"`
}

func (m *ObtainCredProofRandData) Reset()                    { *m = ObtainCredProofRandData{} }
func (m *ObtainCredProofRandData) String() string            { return proto.CompactTextString(m) }
func (*ObtainCredProofRandData) ProtoMessage()               {}
func (*ObtainCredProofRandData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ObtainCredProofRandData) GetX11() *ECGroupElement {
	if m != nil {
		return m.X11
	}
	return nil
}

func (m *ObtainCredProofRandData) GetX12() *ECGroupElement {
	if m != nil {
		return m.X12
	}
	return nil
}

func (m *ObtainCredProofRandData) GetX21() *ECGroupElement {
	if m != nil {
		return m.X21
	}
	return nil
}

func (m *ObtainCredProofRandData) GetX22() *ECGroupElement {
	if m != nil {
		return m.X22
	}
	return nil
}

func (m *ObtainCredProofRandData) GetA() *ECGroupElement {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *ObtainCredProofRandData) GetB() *ECGroupElement {
	if m != nil {
		return m.B
	}
	return nil
}

type TransferCredProofRandData struct {
	OrgName string          `protobuf:"bytes,1,opt,name=OrgName" json:"OrgName,omitempty"`
	X1      *ECGroupElement `protobuf:"bytes,2,opt,name=X1" json:"X1,omitempty"`
	X2      *ECGroupElement `protobuf:"bytes,3,opt,name=X2" json:"X2,omitempty"`
	NymA    *ECGroupElement `protobuf:"bytes,4,opt,name=NymA" json:"NymA,omitempty"`
	NymB    *ECGroupElement `protobuf:"bytes,5,opt,name=NymB" json:"NymB,omitempty"`
	Cred    *Cred           `protobuf:"bytes,6,opt,name=cred" json:"cred,omitempty"`
}

func (m *TransferCredProofRandData) Reset()                    { *m = TransferCredProofRandData{} }
func (m *TransferCredProofRandData) String() string            { return proto.CompactTextString(m) }
func (*TransferCredProofRandData) ProtoMessage()               {}
func (*TransferCredProofRandData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *TransferCredProofRandData) GetOrgName() string {
	if m != nil {
		return m.OrgName
	}
	return ""
}

func (m *TransferCredProofRandData) GetX1() *ECGroupElement {
	if m != nil {
		return m.X1
	}
	return nil
}

func (m *TransferCredProofRandData) GetX2() *ECGroupElement {
	if m != nil {
		return m.X2
	}
	return nil
}

func (m *TransferCredProofRandData) GetNymA() *ECGroupElement {
	if m != nil {
		return m.NymA
	}
	return nil
}

func (m *TransferCredProofRandData) GetNymB() *ECGroupElement {
	if m != nil {
		return m.NymB
	}
	return nil
}

func (m *TransferCredProofRandData) GetCred() *Cred {
	if m != nil {
		return m.Cred
	}
	return nil
}

func init() {
	proto.RegisterType((*CARequest)(nil), "ecpsyspb.CARequest")
	proto.RegisterType((*CAResponse)(nil), "ecpsyspb.CAResponse")
	proto.RegisterType((*ProofRandData)(nil), "ecpsyspb.ProofRandData")
	proto.RegisterType((*Cert)(nil), "ecpsyspb.Cert")
	proto.RegisterType((*ECGroupElement)(nil), "ecpsyspb.ECGroupElement")
	proto.RegisterType((*GenerateNymRequest)(nil), "ecpsyspb.GenerateNymRequest")
	proto.RegisterType((*ObtainCredRequest)(nil), "ecpsyspb.ObtainCredRequest")
	proto.RegisterType((*ObtainCredResponse)(nil), "ecpsyspb.ObtainCredResponse")
	proto.RegisterType((*TransferCredRequest)(nil), "ecpsyspb.TransferCredRequest")
	proto.RegisterType((*GenerateNymProofRandData)(nil), "ecpsyspb.GenerateNymProofRandData")
	proto.RegisterType((*Cred)(nil), "ecpsyspb.Cred")
	proto.RegisterType((*Transcript)(nil), "ecpsyspb.Transcript")
	proto.RegisterType((*ObtainCredProofRandData)(nil), "ecpsyspb.ObtainCredProofRandData")
	proto.RegisterType((*TransferCredProofRandData)(nil), "ecpsyspb.TransferCredProofRandData")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CA_EC service

type CA_ECClient interface {
	GenerateCertificate(ctx context.Context, opts ...grpc.CallOption) (CA_EC_GenerateCertificateClient, error)
}

type cA_ECClient struct {
	cc *grpc.ClientConn
}

func NewCA_ECClient(cc *grpc.ClientConn) CA_ECClient {
	return &cA_ECClient{cc}
}

func (c *cA_ECClient) GenerateCertificate(ctx context.Context, opts ...grpc.CallOption) (CA_EC_GenerateCertificateClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CA_EC_serviceDesc.Streams[0], c.cc, "/ecpsyspb.CA_EC/GenerateCertificate", opts...)
	if err != nil {
		return nil, err
	}
	x := &cA_ECGenerateCertificateClient{stream}
	return x, nil
}

type CA_EC_GenerateCertificateClient interface {
	Send(*CARequest) error
	Recv() (*CAResponse, error)
	grpc.ClientStream
}

type cA_ECGenerateCertificateClient struct {
	grpc.ClientStream
}

func (x *cA_ECGenerateCertificateClient) Send(m *CARequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cA_ECGenerateCertificateClient) Recv() (*CAResponse, error) {
	m := new(CAResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for CA_EC service

type CA_ECServer interface {
	GenerateCertificate(CA_EC_GenerateCertificateServer) error
}

func RegisterCA_ECServer(s *grpc.Server, srv CA_ECServer) {
	s.RegisterService(&_CA_EC_serviceDesc, srv)
}

func _CA_EC_GenerateCertificate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CA_ECServer).GenerateCertificate(&cA_ECGenerateCertificateServer{stream})
}

type CA_EC_GenerateCertificateServer interface {
	Send(*CAResponse) error
	Recv() (*CARequest, error)
	grpc.ServerStream
}

type cA_ECGenerateCertificateServer struct {
	grpc.ServerStream
}

func (x *cA_ECGenerateCertificateServer) Send(m *CAResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cA_ECGenerateCertificateServer) Recv() (*CARequest, error) {
	m := new(CARequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _CA_EC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ecpsyspb.CA_EC",
	HandlerType: (*CA_ECServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GenerateCertificate",
			Handler:       _CA_EC_GenerateCertificate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "anauth/ecpsys/ecpsyspb/ecpsys.proto",
}

// Client API for Org_EC service

type Org_ECClient interface {
	GenerateNym(ctx context.Context, opts ...grpc.CallOption) (Org_EC_GenerateNymClient, error)
	ObtainCred(ctx context.Context, opts ...grpc.CallOption) (Org_EC_ObtainCredClient, error)
	TransferCred(ctx context.Context, opts ...grpc.CallOption) (Org_EC_TransferCredClient, error)
}

type org_ECClient struct {
	cc *grpc.ClientConn
}

func NewOrg_ECClient(cc *grpc.ClientConn) Org_ECClient {
	return &org_ECClient{cc}
}

func (c *org_ECClient) GenerateNym(ctx context.Context, opts ...grpc.CallOption) (Org_EC_GenerateNymClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Org_EC_serviceDesc.Streams[0], c.cc, "/ecpsyspb.Org_EC/GenerateNym", opts...)
	if err != nil {
		return nil, err
	}
	x := &org_ECGenerateNymClient{stream}
	return x, nil
}

type Org_EC_GenerateNymClient interface {
	Send(*GenerateNymRequest) error
	Recv() (*psyspb.GenerateNymResponse, error)
	grpc.ClientStream
}

type org_ECGenerateNymClient struct {
	grpc.ClientStream
}

func (x *org_ECGenerateNymClient) Send(m *GenerateNymRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *org_ECGenerateNymClient) Recv() (*psyspb.GenerateNymResponse, error) {
	m := new(psyspb.GenerateNymResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *org_ECClient) ObtainCred(ctx context.Context, opts ...grpc.CallOption) (Org_EC_ObtainCredClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Org_EC_serviceDesc.Streams[1], c.cc, "/ecpsyspb.Org_EC/ObtainCred", opts...)
	if err != nil {
		return nil, err
	}
	x := &org_ECObtainCredClient{stream}
	return x, nil
}

type Org_EC_ObtainCredClient interface {
	Send(*ObtainCredRequest) error
	Recv() (*ObtainCredResponse, error)
	grpc.ClientStream
}

type org_ECObtainCredClient struct {
	grpc.ClientStream
}

func (x *org_ECObtainCredClient) Send(m *ObtainCredRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *org_ECObtainCredClient) Recv() (*ObtainCredResponse, error) {
	m := new(ObtainCredResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *org_ECClient) TransferCred(ctx context.Context, opts ...grpc.CallOption) (Org_EC_TransferCredClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Org_EC_serviceDesc.Streams[2], c.cc, "/ecpsyspb.Org_EC/TransferCred", opts...)
	if err != nil {
		return nil, err
	}
	x := &org_ECTransferCredClient{stream}
	return x, nil
}

type Org_EC_TransferCredClient interface {
	Send(*TransferCredRequest) error
	Recv() (*psyspb.TransferCredResponse, error)
	grpc.ClientStream
}

type org_ECTransferCredClient struct {
	grpc.ClientStream
}

func (x *org_ECTransferCredClient) Send(m *TransferCredRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *org_ECTransferCredClient) Recv() (*psyspb.TransferCredResponse, error) {
	m := new(psyspb.TransferCredResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Org_EC service

type Org_ECServer interface {
	GenerateNym(Org_EC_GenerateNymServer) error
	ObtainCred(Org_EC_ObtainCredServer) error
	TransferCred(Org_EC_TransferCredServer) error
}

func RegisterOrg_ECServer(s *grpc.Server, srv Org_ECServer) {
	s.RegisterService(&_Org_EC_serviceDesc, srv)
}

func _Org_EC_GenerateNym_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(Org_ECServer).GenerateNym(&org_ECGenerateNymServer{stream})
}

type Org_EC_GenerateNymServer interface {
	Send(*psyspb.GenerateNymResponse) error
	Recv() (*GenerateNymRequest, error)
	grpc.ServerStream
}

type org_ECGenerateNymServer struct {
	grpc.ServerStream
}

func (x *org_ECGenerateNymServer) Send(m *psyspb.GenerateNymResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *org_ECGenerateNymServer) Recv() (*GenerateNymRequest, error) {
	m := new(GenerateNymRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Org_EC_ObtainCred_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(Org_ECServer).ObtainCred(&org_ECObtainCredServer{stream})
}

type Org_EC_ObtainCredServer interface {
	Send(*ObtainCredResponse) error
	Recv() (*ObtainCredRequest, error)
	grpc.ServerStream
}

type org_ECObtainCredServer struct {
	grpc.ServerStream
}

func (x *org_ECObtainCredServer) Send(m *ObtainCredResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *org_ECObtainCredServer) Recv() (*ObtainCredRequest, error) {
	m := new(ObtainCredRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Org_EC_TransferCred_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(Org_ECServer).TransferCred(&org_ECTransferCredServer{stream})
}

type Org_EC_TransferCredServer interface {
	Send(*psyspb.TransferCredResponse) error
	Recv() (*TransferCredRequest, error)
	grpc.ServerStream
}

type org_ECTransferCredServer struct {
	grpc.ServerStream
}

func (x *org_ECTransferCredServer) Send(m *psyspb.TransferCredResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *org_ECTransferCredServer) Recv() (*TransferCredRequest, error) {
	m := new(TransferCredRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Org_EC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ecpsyspb.Org_EC",
	HandlerType: (*Org_ECServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GenerateNym",
			Handler:       _Org_EC_GenerateNym_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ObtainCred",
			Handler:       _Org_EC_ObtainCred_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "TransferCred",
			Handler:       _Org_EC_TransferCred_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "anauth/ecpsys/ecpsyspb/ecpsys.proto",
}

func init() { proto.RegisterFile("anauth/ecpsys/ecpsyspb/ecpsys.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 864 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x96, 0x4f, 0x53, 0xe3, 0x36,
	0x14, 0xc0, 0x91, 0x09, 0x81, 0x3c, 0x02, 0x33, 0x08, 0xa6, 0xb8, 0xfc, 0xe9, 0xb4, 0x86, 0xe9,
	0x30, 0x1d, 0x26, 0x60, 0xb7, 0xe7, 0x76, 0xec, 0x94, 0x42, 0xcb, 0x14, 0xa8, 0xc9, 0x21, 0x70,
	0xe9, 0x38, 0x89, 0x48, 0x32, 0x8d, 0x1d, 0xd7, 0x76, 0x0e, 0xe9, 0x17, 0xe8, 0xee, 0x1e, 0xf6,
	0xbe, 0x9f, 0x62, 0xef, 0x7b, 0xd8, 0x0f, 0xb0, 0x1f, 0x69, 0x4f, 0x2b, 0xc9, 0xf2, 0x3f, 0xd6,
	0x41, 0x39, 0x30, 0x7b, 0xb2, 0x25, 0xfd, 0xde, 0x1f, 0x3d, 0xbd, 0xf7, 0x24, 0x38, 0x70, 0x3c,
	0x67, 0x12, 0x0d, 0x4e, 0x48, 0xd7, 0x0f, 0xa7, 0xa1, 0xf8, 0xf8, 0x1d, 0xf1, 0xd3, 0xf0, 0x83,
	0x71, 0x34, 0xc6, 0x2b, 0xc9, 0xf4, 0xce, 0xbe, 0xc0, 0x39, 0x2c, 0xd0, 0x0c, 0xd4, 0x22, 0xa8,
	0x35, 0x4d, 0x9b, 0xfc, 0x3b, 0x21, 0x61, 0x84, 0x7f, 0x81, 0x35, 0x3a, 0x3b, 0x7e, 0xb0, 0x1d,
	0xaf, 0xf7, 0xab, 0x13, 0x39, 0x2a, 0xfa, 0x16, 0x1d, 0xad, 0x1a, 0xdb, 0x8d, 0x44, 0x5b, 0xe3,
	0x26, 0xbf, 0x7c, 0xb1, 0x60, 0x17, 0x79, 0xfc, 0x0d, 0xd4, 0xf8, 0x04, 0x17, 0x56, 0xa8, 0x70,
	0x9d, 0x32, 0xd9, 0x94, 0x55, 0x85, 0x4a, 0x34, 0xf5, 0x89, 0x76, 0x0f, 0xc0, 0xac, 0x86, 0xfe,
	0xd8, 0x0b, 0x09, 0x93, 0xea, 0x0e, 0x9c, 0xd1, 0x88, 0x78, 0x7d, 0xc2, 0x4d, 0x72, 0xa9, 0x74,
	0x0a, 0x1f, 0x42, 0xa5, 0x4b, 0x82, 0x88, 0x2b, 0x5c, 0x35, 0xd6, 0x33, 0x6f, 0x9a, 0x74, 0x96,
	0xa2, 0x7c, 0x35, 0xd5, 0xfd, 0x3f, 0x82, 0xb5, 0x82, 0x9b, 0xf8, 0x7b, 0x40, 0x6d, 0xb1, 0x15,
	0x35, 0x13, 0x3e, 0x6b, 0x9e, 0x07, 0xe3, 0x89, 0x7f, 0x36, 0x22, 0x2e, 0xf1, 0x22, 0x1b, 0xb5,
	0x19, 0x67, 0x0a, 0x23, 0x4f, 0x70, 0x26, 0xe3, 0x2c, 0x75, 0x51, 0xc6, 0x59, 0xda, 0x6b, 0x04,
	0x15, 0xe6, 0x22, 0xfe, 0x09, 0x56, 0xac, 0xd1, 0xd0, 0xeb, 0x91, 0x9e, 0x29, 0xf5, 0x23, 0x25,
	0x73, 0x52, 0x96, 0xd4, 0xab, 0x94, 0xc4, 0x75, 0x40, 0x36, 0x77, 0xae, 0x6e, 0x23, 0x9b, 0x8d,
	0x6e, 0xd5, 0x4a, 0x3c, 0xba, 0xd5, 0x8e, 0x61, 0xbd, 0x28, 0xc7, 0xd6, 0xe3, 0xd0, 0xd4, 0x59,
	0x00, 0xe8, 0xe8, 0x2e, 0x3e, 0x36, 0x1b, 0xdd, 0x69, 0x2f, 0x10, 0xe0, 0x73, 0xe2, 0x91, 0xc0,
	0x89, 0xc8, 0xd5, 0xd4, 0x4d, 0x92, 0xe4, 0x8f, 0xf2, 0x24, 0xd1, 0x32, 0xdf, 0x72, 0x42, 0xcf,
	0x94, 0x2f, 0x6f, 0x11, 0x6c, 0x5c, 0x77, 0x22, 0x67, 0xe8, 0x35, 0x03, 0xd2, 0xfb, 0x52, 0xe9,
	0x8a, 0xf5, 0x7c, 0x62, 0xc6, 0x07, 0xbe, 0xd1, 0x10, 0xaa, 0xad, 0x69, 0x44, 0xc2, 0x1b, 0x67,
	0x18, 0x14, 0x72, 0x35, 0xf5, 0xf8, 0x1d, 0x0d, 0x5e, 0xde, 0xe3, 0x39, 0x53, 0xfd, 0xf7, 0xc7,
	0x5b, 0x8a, 0x0f, 0xfe, 0xbb, 0x6c, 0x4b, 0x99, 0x52, 0xc9, 0xe6, 0xf4, 0xfc, 0xe6, 0x9e, 0x72,
	0xfe, 0xf3, 0x70, 0xbf, 0x42, 0xb0, 0xd9, 0x0a, 0x1c, 0x2f, 0x7c, 0x20, 0x41, 0x3e, 0xe0, 0x97,
	0xe5, 0x01, 0x3f, 0xc8, 0xbc, 0xcb, 0x4b, 0x3d, 0xd3, 0xd9, 0x7f, 0x50, 0x40, 0x9d, 0x95, 0x51,
	0xf8, 0x08, 0x94, 0xb6, 0x2e, 0xad, 0x29, 0xca, 0x30, 0xd2, 0xd4, 0xa5, 0x75, 0x44, 0x19, 0x46,
	0x5a, 0xba, 0xb4, 0xbe, 0x29, 0xc3, 0xad, 0x1b, 0xbc, 0xbc, 0x9e, 0xb6, 0x6e, 0x70, 0xeb, 0x86,
	0xba, 0x24, 0xb5, 0xce, 0x49, 0xcb, 0x50, 0xab, 0x52, 0xeb, 0x46, 0x5c, 0xe9, 0xcb, 0x85, 0x4a,
	0x5f, 0x11, 0x95, 0x8e, 0xbf, 0x82, 0x6a, 0x40, 0xfa, 0x97, 0x64, 0xaa, 0xd6, 0xe8, 0x54, 0xcd,
	0x16, 0x23, 0xed, 0xbd, 0x42, 0x5b, 0x12, 0x3d, 0x1b, 0xfc, 0x33, 0xac, 0xdd, 0xba, 0x34, 0xeb,
	0xcc, 0xd6, 0xf8, 0xdc, 0x71, 0x5d, 0x47, 0x1a, 0xc3, 0x22, 0x9e, 0xca, 0x5b, 0x89, 0xbc, 0x32,
	0x97, 0x7c, 0x82, 0xb3, 0xe6, 0x96, 0x9a, 0x96, 0x85, 0x3a, 0x25, 0x79, 0x4b, 0x4c, 0xa4, 0x2a,
	0xd2, 0x96, 0x98, 0x48, 0x1d, 0x82, 0xd2, 0xd2, 0x45, 0xf0, 0xb7, 0x1e, 0xe5, 0x6a, 0x37, 0x18,
	0xfa, 0x34, 0x9c, 0x2d, 0x9d, 0x53, 0x49, 0xe0, 0x67, 0x51, 0x06, 0x6b, 0x8a, 0x90, 0x4d, 0xc5,
	0x57, 0x06, 0x9a, 0xf3, 0xca, 0x90, 0x5e, 0x2d, 0x16, 0xc6, 0x50, 0xb9, 0x70, 0xc2, 0x81, 0x68,
	0xe0, 0xfc, 0x9f, 0x9d, 0xe5, 0xbd, 0x39, 0xf2, 0x07, 0x8e, 0x68, 0xe4, 0x62, 0xa4, 0xbd, 0x51,
	0x60, 0x7b, 0x46, 0x37, 0xc0, 0x3f, 0xc0, 0x62, 0x5b, 0x97, 0x17, 0x06, 0x83, 0x62, 0xd6, 0x90,
	0x7a, 0xc7, 0x20, 0xce, 0x1a, 0xf2, 0xe2, 0x60, 0x50, 0xcc, 0xca, 0xcb, 0x83, 0x41, 0x71, 0x1c,
	0x97, 0xe6, 0x8c, 0x63, 0x55, 0x7e, 0xf5, 0xbe, 0x54, 0xe0, 0xeb, 0x99, 0xbd, 0x08, 0xab, 0xb0,
	0x7c, 0x1d, 0xf4, 0xaf, 0x1c, 0x37, 0xee, 0xc1, 0x35, 0x3b, 0x19, 0x8a, 0x7e, 0xa2, 0xcc, 0xd7,
	0x4f, 0x68, 0xed, 0x2f, 0xce, 0x51, 0xfb, 0xc7, 0x50, 0xa1, 0x7d, 0xcb, 0x94, 0x06, 0x82, 0x53,
	0x82, 0xb6, 0xa4, 0xc1, 0xe0, 0x14, 0xd6, 0xe8, 0xd3, 0x88, 0x6e, 0x4f, 0x84, 0x24, 0xff, 0x34,
	0x62, 0x6d, 0x9b, 0xaf, 0x19, 0xd7, 0xb0, 0xd4, 0x34, 0xff, 0x3e, 0x6b, 0xe2, 0xdf, 0x60, 0x33,
	0x69, 0xa4, 0xec, 0x59, 0x32, 0x7c, 0x18, 0x76, 0xe9, 0x2f, 0xde, 0xcc, 0x49, 0x25, 0x4f, 0xc1,
	0x9d, 0xad, 0xe2, 0x64, 0x7c, 0x7d, 0x69, 0x0b, 0x47, 0xe8, 0x14, 0x19, 0x1f, 0x11, 0x54, 0x69,
	0xc0, 0x98, 0xca, 0x2b, 0x58, 0xcd, 0xf5, 0x66, 0xbc, 0x57, 0xfa, 0x08, 0x48, 0x74, 0xee, 0x36,
	0xca, 0xd6, 0xf2, 0xaa, 0xf1, 0x9f, 0x00, 0x59, 0x4a, 0xe3, 0xdd, 0xb2, 0x6b, 0x2f, 0xd1, 0xb6,
	0x57, 0xbe, 0x58, 0x50, 0xf7, 0x17, 0xd4, 0xf3, 0x59, 0x80, 0xf7, 0xcb, 0x6f, 0xaa, 0x4c, 0x65,
	0xe9, 0x62, 0x5e, 0xa5, 0x75, 0x7a, 0xdf, 0xe8, 0x0f, 0xa3, 0xc1, 0xa4, 0xd3, 0xe8, 0x8e, 0xdd,
	0x13, 0xe2, 0xba, 0xd3, 0xff, 0xfe, 0xf1, 0xf9, 0xf7, 0xa4, 0xfc, 0x61, 0xde, 0xa9, 0xf2, 0x97,
	0xf6, 0x8f, 0x9f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x8d, 0xaa, 0xc0, 0xa2, 0xb9, 0x0b, 0x00, 0x00,
}
