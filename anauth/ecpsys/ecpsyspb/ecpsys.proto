/*
 * Copyright 2017 XLAB d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

syntax = "proto3";

package ecpsyspb;
option go_package = "github.com/emmyzkp/emmy/anauth/ecpsys/ecpsyspb";

import "anauth/psys/psyspb/psys.proto";

service CA_EC {
    rpc GenerateCertificate(stream CARequest) returns (stream CAResponse) {}
}

message CARequest {
    oneof type {
        ProofRandData proofRandData = 1;
        bytes proofData = 2;
    }
}

message CAResponse {
    oneof type {
        bytes challenge = 1;
        Cert cert = 2;
    }
}

// Random data for schnorr proof
message ProofRandData {
    ECGroupElement X = 1;
    ECGroupElement A = 2;
    ECGroupElement B = 3;
}

message Cert {
    ECGroupElement BlindedA = 1;
    ECGroupElement BlindedB = 2;
    bytes R = 3;
    bytes S = 4;
}

message ECGroupElement {
    bytes X = 1;
    bytes Y = 2;
}

service Org_EC {
    rpc GenerateNym (stream GenerateNymRequest) returns (stream psyspb.GenerateNymResponse) {}
    rpc ObtainCred (stream ObtainCredRequest) returns (stream ObtainCredResponse) {}
    rpc TransferCred (stream TransferCredRequest) returns (stream psyspb.TransferCredResponse) {}
}

message GenerateNymRequest {
    oneof type {
        GenerateNymProofRandData proofRandData = 1;
        bytes proofData = 2;
    }
}

message ObtainCredRequest {
    oneof type {
        ProofRandData proofRandData = 1;
        bytes proofData = 2;
        psyspb.BytesPair challenge = 3;
    }
}

message ObtainCredResponse {
    oneof type {
        bytes challenge = 1;
        ObtainCredProofRandData proofRandData = 2;
        psyspb.BytesPair proofData = 3;
    }
}

message TransferCredRequest {
    oneof type {
        TransferCredProofRandData proofRandData = 1;
        bytes proofData = 2;
    }
}

message GenerateNymProofRandData {
    ECGroupElement X1 = 1;
    ECGroupElement A1 = 2;
    ECGroupElement B1 = 3;
    ECGroupElement X2 = 4;
    ECGroupElement A2 = 5;
    ECGroupElement B2 = 6;
    bytes R = 7;
    bytes S = 8;
    string regKey = 9;
}

message Cred {
    ECGroupElement SmallAToGamma = 1;
    ECGroupElement SmallBToGamma = 2;
    ECGroupElement AToGamma = 3;
    ECGroupElement BToGamma = 4;
    Transcript T1 = 5;
    Transcript T2 = 6;
}

message Transcript {
    ECGroupElement A = 1;
    ECGroupElement B = 2;
    bytes Hash = 3;
    bytes ZAlpha = 4;
}

message ObtainCredProofRandData {
    ECGroupElement X11 = 1;
    ECGroupElement X12 = 2;
    ECGroupElement X21 = 3;
    ECGroupElement X22 = 4;
    ECGroupElement A = 5;
    ECGroupElement B = 6;
}

message TransferCredProofRandData {
    string OrgName = 1; // TODO?
    ECGroupElement X1 = 2;
    ECGroupElement X2 = 3;
    ECGroupElement NymA = 4;
    ECGroupElement NymB = 5;
    Cred cred = 6;
}