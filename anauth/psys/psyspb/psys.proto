/*
 * Copyright 2017 XLAB d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

syntax = "proto3";

package psyspb;
option go_package = "github.com/emmyzkp/emmy/anauth/psys/psyspb";

service CA {
    rpc GenerateCertificate(stream CARequest) returns (stream CAResponse) {}
}

message CARequest {
    oneof type {
        ProofRandData proofRandData = 1; // for schnorr proof
        bytes proofData = 2; // for schnorr proof
    }
}

message CAResponse {
    oneof type {
        bytes challenge = 1;
        Cert cert = 2;
    }
}

// Random data for schnorr proof
message ProofRandData {
    bytes X = 1;
    bytes A = 2;
    bytes B = 3;
}

message Cert {
    bytes BlindedA = 1;
    bytes BlindedB = 2;
    bytes R = 3;
    bytes S = 4;
}

service Org {
    rpc GenerateNym (stream GenerateNymRequest) returns (stream GenerateNymResponse) {}
    rpc ObtainCred (stream ObtainCredRequest) returns (stream ObtainCredResponse) {}
    rpc TransferCred (stream TransferCredRequest) returns (stream TransferCredResponse) {}
}

message GenerateNymRequest {
    oneof type {
        GenerateNymProofRandData proofRandData = 1;
        bytes proofData = 2; // for schnorr proof
    }
}

message GenerateNymResponse {
    oneof type {
        PedersenDecommitment decommitment = 1;
        bool success = 2;
    }
}

message ObtainCredRequest {
    oneof type {
        ProofRandData proofRandData = 1;
        bytes proofData = 2;
        BytesPair challenge = 3;
    }
}

message ObtainCredResponse {
    oneof type {
        bytes challenge = 1;
        ObtainCredProofRandData proofRandData = 2;
        BytesPair proofData = 3;
    }
}

message TransferCredRequest {
    oneof type {
        TransferCredProofRandData proofRandData = 1;
        bytes proofData = 2;
    }
}

message TransferCredResponse {
    oneof type {
        bytes challenge = 1;
        string sessionKey = 2;
    }
}

message GenerateNymProofRandData {
    bytes X1 = 1;
    bytes A1 = 2;
    bytes B1 = 3;
    bytes X2 = 4;
    bytes A2 = 5;
    bytes B2 = 6;
    bytes R = 7;
    bytes S = 8;
    string regKey = 9;
}

message BytesPair {
    bytes x = 1;
    bytes y = 2;
}

// TODO remove?
message PedersenDecommitment {
    bytes X = 1;
    bytes R = 2;
}

message Cred {
    bytes SmallAToGamma = 1;
    bytes SmallBToGamma = 2;
    bytes AToGamma = 3;
    bytes BToGamma = 4;
    Transcript T1 = 5;
    Transcript T2 = 6;
}

message Transcript {
    bytes A = 1;
    bytes B = 2;
    bytes Hash = 3;
    bytes ZAlpha = 4;
}

message ObtainCredProofRandData {
    bytes X11 = 1;
    bytes X12 = 2;
    bytes X21 = 3;
    bytes X22 = 4;
    bytes A = 5;
    bytes B = 6;
}

message TransferCredProofRandData {
    string OrgName = 1;
    bytes X1 = 2;
    bytes X2 = 3;
    bytes NymA = 4;
    bytes NymB = 5;
    Cred cred = 6;
}