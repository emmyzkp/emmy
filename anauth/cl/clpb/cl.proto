/*
 * Copyright 2017 XLAB d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

syntax = "proto3";

package clpb;
option go_package = "github.com/emmyzkp/emmy/anauth/cl/clpb";

service AnonCreds {
	rpc GetPublicParams (Empty) returns (PublicParams) {}
	// TODO merge with GetPublicParams
	rpc GetAcceptableCreds(Empty) returns (AcceptableCreds) {}

	rpc Issue (stream Request) returns (stream Response) {}
	rpc Update (CredUpdateRequest) returns (IssuedCred) {}
	rpc Prove (stream Request) returns (stream Response) {}
}

message Request {
    oneof type {
        Empty empty = 1;
		string regKey = 2;
		CredIssueRequest credIssue = 3;
        CredProof credProve = 4;
    }
}

message Response {
    oneof type {
        bytes nonce = 1; // bytes?
		IssuedCred issuedCred = 2;
		string sessionKey = 3;
    }
}

message Empty {}

message SchnorrGroup {
	bytes p = 2;
	bytes g = 3;
	bytes q = 4;
}

message PedersenParams {
	SchnorrGroup schnorrGroup = 1;
	bytes h = 2;
}

message PubKey {
	bytes n = 1;
	bytes s = 2;
	bytes z = 3;
	repeated bytes rsKnown = 4;
	repeated bytes rsCommitted = 5;
	repeated bytes rsHidden = 6;
	PedersenParams pedersenParams = 7;
	bytes n1 = 8;
	bytes g = 9;
	bytes h = 10;
}

message Params {
	// There are only a few possibilities for RhoBitLen. 256 implies that the modulus
	// bit length is 2048
	int32 RhoBitLen = 1;          // bit length of order of the commitment group
	int32 NLength = 2;           // bit length of RSA modulus
	int32 AttrBitLen = 6;        // bit length of attribute
	int32 HashBitLen = 7;         // bit length of hash output used for
	//Fiat-Shamir
	int32 SecParam = 8;           // security parameter
	int32 EBitLen = 9;           // size of e values of certificates
	int32 E1BitLen = 10;          // size of the interval the e values are taken
	//from
	int32 VBitLen = 11;            // size of the v values of the certificates
	int32 ChallengeSpace = 12;     // bit length of challenges for DF commitment
	//proofs
}

message PublicParams {
	PubKey pubKey = 1;
	Params params = 2;
	CredStructure credStructure = 3;
}

message CredIssueRequest {
	bytes Nym = 1;
	repeated bytes KnownAttrs = 2;
	repeated bytes CommitmentsOfAttrs = 3;
	FiatShamir NymProof = 4;
	bytes U = 5;
	FiatShamirAlsoNeg UProof = 6;
	repeated FiatShamir CommitmentsOfAttrsProofs = 7;
	bytes Nonce = 8;
	string RegKey = 9;
}

message Cred {
	bytes A = 1;
	bytes E = 2;
	bytes V11 = 3;
}

message IssuedCred {
	Cred cred = 1;
	FiatShamirAlsoNeg AProof = 2;
}

message CredUpdateRequest {
	bytes Nym = 1;
	bytes Nonce = 2;
	repeated bytes NewKnownAttrs = 3;
}

message CredProof {
	bytes A = 1;
	FiatShamirAlsoNeg Proof = 2;
	repeated bytes KnownAttrs = 3;
	repeated bytes CommitmentsOfAttrs = 4;
	repeated int32 RevealedKnownAttrs = 5;
	repeated int32 RevealedCommitmentsOfAttrs = 6;
}

message FiatShamir {
	// Used for example for SchnorrProof and RepresentationProof where challenge is constructed by prover
	// using hash function.
	// Note that here we don't have A and B as in SchnorrProofRandomData because usually when proving
	// the knowledge of X such that A^X = B, A is known beforehand (as part of public key).
	// So here ProofRandomData is actually only X.
	bytes ProofRandomData = 1;
	bytes Challenge = 2;
	repeated bytes ProofData = 3;
}

message FiatShamirAlsoNeg {
	// For proofs where proof data can be negative (see RepresentationProof).
	bytes ProofRandomData = 1;
	bytes Challenge = 2;
	repeated string ProofData = 3;
}

message AcceptableCred {
	string orgName = 1;
	repeated string revealedAttrs = 2;
}

message AcceptableCreds {
	repeated AcceptableCred creds = 1;
}

message Attribute {
	int32 index = 1;
	string name = 2;
	bool known = 4;
}

message IntAttribute {
	Attribute attr = 1;
}

message StringAttribute {
	Attribute attr = 2;
}

message CredAttribute {
	oneof type {
		StringAttribute stringAttr = 1;
		IntAttribute intAttr = 2;
	}
}

message CredStructure {
	int32 nKnown = 1;
	int32 nCommitted = 2;
	int32 nHidden = 3;
	repeated CredAttribute attributes = 4;
}